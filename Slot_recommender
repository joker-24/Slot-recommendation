# Import packages

import pandas as pd
import numpy as np
from meza import io
# Code to read csv file into Colaboratory:
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
#from google.colab import auth
from oauth2client.client import GoogleCredentials
import pyodbc
#from google.colab import data_table
import time
import pandas_access as mdb
import selenium
from selenium import webdriver
import time
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup
import sqlite3
from selenium.webdriver.common.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver import Chrome
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.select import Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import difflib
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('white')
%matplotlib inline



Estrazioni features dei giochi

my = pd.read_excel(r"games.xlsx")
my_games = my["my"].drop_duplicates()
lista = list(my_games)

genre = my["Unnamed: 1"][:7555]
slot_catalog = my["Slot Catalog"][:7555]
slot_catalog = pd.DataFrame(slot_catalog)
slot_catalog["genre"] = genre
slot_catalog['my'] = my_games
my_games   


current_html = []
for game in lista:
    url = "https://slotcatalog.com/it"
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument(r'user-data-dir=C:\Users\cesma2022\AppData\Local\Google\Chrome\Selenium')
    chrome_options.add_argument(r'--profile-directory=Selenium')
    driver1 = Service(r"C:\Users\cesma2022\Downloads\chromedriver.exe")
    driver = webdriver.Chrome(executable_path=r"C:\Users\cesma2022\Desktop\Slot catalog\chromedriver.exe",options=chrome_options)
    driver.get(url)
    time.sleep(2)
    while True:
            time.sleep(2)
            try:
                search  = driver.find_element(By.ID,"selsearch").send_keys(game)
                time.sleep(2)
                ga = posts = driver.find_element(By.XPATH,"//div[@class='tt-dataset tt-dataset-SCSearch']/a[@class='tt-suggestion tt-selectable']//div//p")
                ga.click()
                time.sleep(3)
                current_html.append(driver.page_source)
                break

            except NoSuchElementException:
                break
    driver.quit()

current_soup =[]
for i in range(747):
    current_soup.append(BeautifulSoup(current_html[i])) 

div = []
for s in range(747):
        div.append(current_soup[s].find('div',{"class":"slotAttrReview"}))

table = []
for i in range(747):
    try:
        table.append(div[i].find("table"))
    except:
        print("No",i) 
table

title = []
for i in range(747):
    try:
        title.append(div[i].find("h3").text)
    except:
        print("NO" ,i)
title
df_title = pd.DataFrame(title)
df_title.rename(columns={0:'Title'},inplace=True)
df_title.to_excel('df_title.xlsx') 

df_title
df_title.set_index('Title',drop=True,inplace=True)
pd_table = pd.read_html(str(table))
x = pd_table[0].T
y = pd_table[1].T.drop(0)
z = x.append(y)

c = []
for i in range(743):
    c.append(pd_table[i].T.drop(0))

z = z.append(c)
zz = pd.DataFrame(z)
zz.to_excel('xx.xlsx')

# Cosine similarity

x = pd.read_excel('xx.xlsx')
x
x.reset_index(level=0)
x.shape
x['Title'].head()
x['Tipo:']                 = x['Tipo:'].fillna('')
x['Frequenza di vincita:'] = x['Frequenza di vincita:'].fillna('')
x['Oggetti: N/A'] = x['Oggetti: N/A'].fillna('')
x['Tema: Gioco di carte'] = x['Tema: Gioco di carte'].fillna('')
x['RTP:'] = x['RTP:'].fillna('')
x['Altri : Grigio, Nero, Carta, Casinò dal vivo, Manganello, patata fritta'] = x['Altri : Grigio, Nero, Carta, Casinò dal vivo, Manganello, patata fritta'].fillna('')
x['Genere: N/A'] = x['Genere: N/A'].fillna('')
features_ = x['Tipo:']+' '+x['Frequenza di vincita:']+' '+x['Oggetti: N/A']+' '+x['Tema: Gioco di carte']+' '+x['RTP:']+' '+x['Altri : Grigio, Nero, Carta, Casinò dal vivo, Manganello, patata fritta']+' '+x['Genere: N/A']

vectorizer =  TfidfVectorizer()
features_vector = vectorizer.fit_transform(features_)
similarity = cosine_similarity(features_vector)

game = input('Enter game:')
game_list = x['Title'].tolist()
matching_game = difflib.get_close_matches(game,game_list)
print(matching_game)

close_match = matching_game[0]
close_index = x[x.Title==close_match].index.values[0]
similarity_score = list(enumerate(similarity[close_index]))
similarity_score
sorted_similarities = sorted(similarity_score,key=lambda x:x[1],reverse=True)

i=1
for movie in sorted_similarities:
    indexx = movie[0]
    title_index = x[x.index==indexx]['Title'].values[0]
    if i<11:
        print(i,'.',title_index)
        i+=1

# Sample recommender


#import data with io
rec = io.read_mdb('/content/drive/MyDrive/Colab Notebooks/Dataset.mdb')
df_mdb = pd.DataFrame(rec)

df_mdb = pd.read_sql('select * from Data',conn)
df_mdb = df_mdb.rename(columns={"Freq (AGG)":"FREQUENCY","GROSSWIN (SOMMA)":"GROSSWIN","STAKES (SOMMA)":"STAKES"})
df_mdb = df_mdb.sort_values("CLIENT_ID")
df_mdb
sample = df_mdb[:1000]
sample = sample.set_index("CLIENT_ID")
sample

x = sample.groupby(sample.index)["STAKES"].agg(["mean","max","min","std"])

x["max-mean"] = x["max"] - x["mean"]
x["mean-min"] =   x["mean"] - x["min"]

x
sample["rating"] = sample["FREQUENCY"]/(sample.groupby("CLIENT_ID")["FREQUENCY"]).max()
pivot_sample = sample.pivot(columns="GAME",values="rating")
pivot_sample
avg_rating  = sample.groupby("GAME")["rating"].mean().sort_values(ascending=False)
avg_rating
sample.groupby("GAME")["rating"].count().sort_values(ascending=False)
ratings = pd.DataFrame(sample.groupby("GAME")["rating"].mean())
ratings["num_ratings"] = pd.DataFrame(sample.groupby("GAME")["rating"].count())
ratings

plt.figure(figsize=(10,4))
ratings['num_ratings'].hist(bins=70)
ratings["rating"].hist()
book_of_egypt_rating= pivot_sample["BOOK OF EGYPT"]
similar_to_book_of_egypt = pivot_sample.corrwith(book_of_egypt_rating)
corr_book_of_egypt = pd.DataFrame(similar_to_book_of_egypt)
corr_book_of_egypt.dropna(inplace=True)
